# Use: 
# mamba activate snakemake-transcrypt
# snakemake -c x data/mapped_clusters/sorted/<samplename>_sorted_<AS | MIBiG>.bam.bai

#Alignment step???

rule Run_AS:
    input:
        "{metagenome_folder}/*"
    output:
        "data/AS/*/c*region*.gbk"
    shell:
        "for file in metagenomes/*; do antismash $file --genefinding-tool prodigal-m; done"

rule Samples_prep:
    input:
        "data/{database}/*"
    output:
        "{database}/{database}_clusters.fasta"
    shell:
        "python as_gbk_to_1fasta_updated.py -i {database} -o {database}_clusters.fasta"


#rule AS_samples_prep: 
#    input:
#        "data/AS/*/c*region*.gbk"
#    output:
#        "AS/AS_clusters.fasta"
#    shell:
#        "python3 as_gbk_to_1fasta.py -i {fasta_dir} -o {fasta_file}"

# Convert ALL antismash clusters.gbk from Antismash analysis to fasta for mapping
#rule AS_samples_prep:
#    output:
#        "data/AS/AS_clusters.fasta"
#    shell:
#        #Antismash
#        """for file in data/AS/*/c*region*.gbk; do sequence_name=$(sed -n '/Original ID/p' $file | tr -s ' ' | cut -d ' ' -f5)___; sequence_to_replace=$(sed -n '/^LOCUS/p' $file | tr -s ' ' | cut -d ' ' -f2); sed "s/$sequence_to_replace/$sequence_name$(basename $file .gbk)/" $file > $file.conv; done;"""
#        """cat data/AS/*/c*region*.gbk.conv | seqconverter -I genbank -O fasta > {output}"""

# Convert ALL clusters.gbk from MIBiG database for mapping
#rule MIBiG_samples_prep:
#	output:
#		"data/MIBiG/MIBiG_clusters.fasta"
#	shell:
#		"""cat data/MIBiG/*.gbk | seqconverter -I genbank -O fasta > {output}"""
#
# Map the transcritome on the chosen clusters

rule make_blastdb:
    input:
        "{database}/{database}_clusters.fasta"
    output:
        "{blast_dir}"
    shell:
        """makeblastdb -in "${fasta_dir}/${fasta_file}" -parse_seqids -max_file_sz '4GB' -blastdb_version 5 -title "Database" -dbtype nucl -out "${blast_dir}""""

rule blastn:
    input:
        "{database}/{database}_clusters.fasta"
    output:
        "{blast_file}/pairwise_table_symmetric.tsv"
    shell:
        """blastn -query "${fasta_dir}/${fasta_file}" -db "${blast_dir}" -task dc-megablast -outfmt "6 qaccver saccver qstart qend sstart send pident length qcovs qcovhsp mismatch evalue bitscore" -subject_besthit >> "${blast_dir}/${blast_file}"""
        """sed -i '1i qaccver\tsaccver\tqstart\tqend\tsstart\tsend\tpident\tlength\tqcovs\tqcovhsp\tmismatch\tevalue\tbitscore' "${blast_dir}/${blast_file}"""
        """python3 symmetrise_blastn.py --blast "${blast_dir}/${blast_file}" --fasta "${fasta_dir}/${fasta_file}""""

rule mcl:
    input:
        "{blast_file}/pairwise_table_symmetric.tsv"
    output:
        "{mcl_file}/blast_result.mci"
    shell:
        # convert blast to abc format (seq1, seq2, score(hereEvalue)) http://micans.org/mcl/man/clmprotocols.html#blast
        # Also skipping the header line
        """cut -f "1,2,12" "${blast_dir}/${blast_file}" | tail -n +2  > "${mcl_dir}/blast_result.abc"""
        #load using mcxload to create networkfile (.mci) and dictionary file (.tab)
        """mcxload -abc "${mcl_dir}/blast_result.abc" --stream-mirror --stream-neg-log10 -stream-tf 'ceil(200)' -o "${mcl_dir}/blast_result.mci" -write-tab "${mcl_dir}/blast_result.tab"""
        # Run the clustering
        """mcl "${mcl_dir}/blast_result.mci" -I 1.4  -use-tab "${mcl_dir}/blast_result.tab" -odir "${mcl_dir}""""
        """mcl "${mcl_dir}/blast_result.mci" -I 2  -use-tab "${mcl_dir}/blast_result.tab" -odir "${mcl_dir}""""
        """mcl "${mcl_dir}/blast_result.mci" -I 4  -use-tab "${mcl_dir}/blast_result.tab" -odir "${mcl_dir}""""
        """mcl "${mcl_dir}/blast_result.mci" -I 6  -use-tab "${mcl_dir}/blast_result.tab" -odir "${mcl_dir}""""
        # collect-to-jsons.
        """python3 mcl_conv_json.py --mcl-files ${mcl_dir}/*mci.I*"""

rule heatmap_clustering:
    input:
        "{blast_dir}/pairwise_table_symmetric.tsv"
    output:
        "{blast_dir}/heatmap_mci.I14.png"
        "{blast_dir}/heatmap_mci.I40.png"
        "{blast_dir}/heatmap_mci.I20.png"
        "{blast_dir}/heatmap_mci.I60.png"
    shell:
        """python heatmap.py --blast ${blast_dir}/pairwise_table_symmetric.tsv --mcl-cluster-dir ${mcl_dir} -o ${heatmap_dir}"""

rule get_representatives:
    input:
        "{baseline}/"
    output:
        "{rep_file}/cluster_repre.fa"
    shell:
        "python3 get_cluster_representatives.py --family-json ${mcl_dir}/*mci.I40.json --similarity-matrix ${blast_dir}/pairwise_table_symmetric.tsv  --antismash-fasta-file ${fasta_dir}/${fasta_file} --outfile "${representative_dir}/cluster_repre.fa""

rule kallisto_index:
    input:
        "{database}/{database}_clusters.fasta"
    output:
        "{kallisto_file}/{database}_index.idx"
    shell:
        "kallisto index -i {output} {input}"


rule kallisto_quant:
    input:
        "{kallisto_file}/{database}_index.idx"
    output:
        "{kallisto_file}/"
    shell:
        "for folder in {metatranscriptomes_file}/*; do kallisto quant -i {input}_index.idx -o kallisto_out_rep/{database}_$(basename $folder) $folder/*.fq.gz; done"

rule analysis:
    input:
        ""
    output:
        ""
    shell:
        ""
#rule bwa_index:
#    input:
#        "data/{database}/{database}_clusters.fasta"
#    output:
#        "data/{database}/{database}_clusters.fasta.amb"
#    shell:
#        "bwa index {input}"

#rule bwa_map:
#    input:
#        fasta="data/{database}/{database}_clusters.fasta",
#        fastq1="data/metatranscriptomes/{sample}/{sample}.1.fq.gz",
#        fastq2="data/metatranscriptomes/{sample}/{sample}.2.fq.gz",
#        index="data/{database}/{database}_clusters.fasta.amb"
#    output:
#        "data/mapped_clusters/{sample}_{database}.bam"
#    threads : 8
#    shell:
#        "bwa mem -t 8 {input.fasta} {input.fastq1} {input.fastq2} | samtools view -Sb - > {output}"

# Sort and index the bam file
#rule samtools_sort:
#    input:
#        "data/mapped_clusters/{sample}_{database}.bam"
#    output:
#        "data/mapped_clusters/sorted/{sample}_sorted_{database}.bam"
#    shell:
#        "samtools sort -T data/mapped_clusters/{wildcards.sample} -O bam {input} > {output};"
#        "samtools index {output}"
#
# Count the number of reads per cluster.
#rule Count_clusters:
#    input:
#        "data/mapped_clusters/sorted/{sample}_sorted_{database}.bam"
#    output:
#        "data/mapped_clusters/counts/{sample}_{database}.tsv"
#    shell:
#        "samtools idxstats {input} > {output}"

#rule Cluster_clusters:
#    input:
#        ""
